diff --git a/node_modules/@geckos.io/server/lib/geckos/channel.d.ts b/node_modules/@geckos.io/server/lib/geckos/channel.d.ts
index 4ddb34d..6ae6a69 100644
--- a/node_modules/@geckos.io/server/lib/geckos/channel.d.ts
+++ b/node_modules/@geckos.io/server/lib/geckos/channel.d.ts
@@ -1,7 +1,7 @@
 import WebRTCConnection from '../wrtc/webrtcConnection';
 import EventEmitter from 'eventemitter3';
 import * as Types from '@geckos.io/common/lib/types';
-export default class ServerChannel {
+export default class ServerChannel<T extends Types.Payload> {
     webrtcConnection: WebRTCConnection;
     dataChannelOptions: Types.ServerOptions;
     userData: any;
@@ -41,7 +41,7 @@ export default class ServerChannel {
          * @param eventName The event name.
          * @param data The data to send.
          */
-        emit: (eventName: Types.EventName, data: Types.Data, options?: Types.EmitOptions | undefined) => void;
+        emit: <K extends keyof T>(eventName: T, data: T[K], options?: Types.EmitOptions | undefined) => void;
     };
     /** Broadcast a message to all channels in the same room, except the sender's. */
     get broadcast(): {
@@ -50,7 +50,7 @@ export default class ServerChannel {
          * @param eventName The event name.
          * @param data The data to send.
          */
-        emit: (eventName: Types.EventName, data: Types.Data, options?: Types.EmitOptions | undefined) => void;
+        emit: <K extends keyof T>(eventName: T, data: T[K], options?: Types.EmitOptions | undefined) => void;
     };
     /**
      * Forward a message to all channels in a specific room.
@@ -62,7 +62,7 @@ export default class ServerChannel {
          * @param eventName The event name.
          * @param data The data to send.
          */
-        emit: (eventName: Types.EventName, data: Types.Data, options?: Types.EmitOptions | undefined) => void;
+        emit: <K extends keyof T>(eventName: K, data: T[K], options?: Types.EmitOptions | undefined) => void;
     };
     /**
      * Emit a message to the channel.
@@ -70,7 +70,7 @@ export default class ServerChannel {
      * @param data The data to send.
      * @param options EmitOptions
      */
-    emit(eventName: Types.EventName, data?: Types.Data | null, options?: Types.EmitOptions): void;
+    emit<K extends keyof T>(eventName: K, data?: T[K] | null, options?: Types.EmitOptions): void;
     private _emit;
     /** Send a raw message. */
     get raw(): {
@@ -96,6 +96,6 @@ export default class ServerChannel {
      * @param eventName The event name.
      * @param callback The event callback.
      */
-    on(eventName: Types.EventName, callback: Types.EventCallbackServer): void;
+    on<K extends keyof T>(eventName: K, callback: Types.EventCallbackServer<T[K]>): void;
 }
 //# sourceMappingURL=channel.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@geckos.io/server/lib/geckos/server.d.ts b/node_modules/@geckos.io/server/lib/geckos/server.d.ts
index 0b49431..4386c1b 100644
--- a/node_modules/@geckos.io/server/lib/geckos/server.d.ts
+++ b/node_modules/@geckos.io/server/lib/geckos/server.d.ts
@@ -3,7 +3,7 @@ import http from 'http';
 import ServerChannel from './channel';
 import * as Types from '@geckos.io/common/lib/types';
 import ConnectionsManagerServer from '../wrtc/connectionsManager';
-export declare class GeckosServer {
+export declare class GeckosServer<T extends Types.Payload> {
     private _port;
     private _cors;
     connectionsManager: ConnectionsManagerServer;
@@ -27,13 +27,13 @@ export declare class GeckosServer {
      * @param data The data you want to send.
      * @param options EmitOptions
      */
-    emit(eventName: Types.EventName, data: Types.Data, options?: Types.EmitOptions): void;
+    emit<K extends keyof T>(eventName: K, data: T[K], options?: Types.EmitOptions): void;
     /**
      * Emit a message to a specific room.
      * @param roomId The roomId.
      */
     room(roomId?: Types.RoomId): {
-        emit: (eventName: Types.EventName, data: Types.Data) => void;
+        emit: <K extends keyof T>(eventName: K, data: T[K]) => void;
     };
     /** Emit a raw message */
     get raw(): {
@@ -43,7 +43,7 @@ export declare class GeckosServer {
         };
     };
     /** Listen for a new connection. */
-    onConnection(callback: (channel: ServerChannel) => void): void;
+    onConnection(callback: (channel: ServerChannel<T>) => void): void;
 }
 /**
  * The geckos.io server library.
@@ -59,7 +59,7 @@ export declare class GeckosServer {
  * @param options.autoManageBuffering By default, geckos.io manages RTCDataChannel buffering for you. Default 'true'
  * @param options.authorization The async authorization callback
  */
-declare const geckosServer: (options?: Types.ServerOptions) => GeckosServer;
+declare const geckosServer: <T extends Types.Payload = {[key: Types.EventName]: Types.Data}>(options?: Types.ServerOptions) => GeckosServer<T>;
 export default geckosServer;
 export { ServerChannel };
 //# sourceMappingURL=server.d.ts.map
\ No newline at end of file
